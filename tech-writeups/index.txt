2:I[922,["901","static/chunks/901-828e4b97b3d8fb45.js","814","static/chunks/814-947ca6217d472e23.js","861","static/chunks/app/tech-writeups/page-df076b78f992598c.js"],"TechWriteupsSection"]
6:I[3182,[],""]
7:I[7707,[],""]
8:I[2886,["553","static/chunks/553-ab061d80f4220e9c.js","185","static/chunks/app/layout-dcc69de85927c075.js"],"Toaster"]
3:T12ee,

# Open Source LLM? Really? (DeepSeek R1 Example)  
*Simplified Edition*

## Open Source vs. Non-Open Source LLMs: Clearing Up the Confusion

The release of **DeepSeek R1** sparked excitement across the tech world. Some have called it “open source,” but the term can mean different things when it comes to Large Language Models (LLMs). Below, we break down what “open source” typically means in software, and how it looks a bit different in the LLM world.

---

### 1. Traditional Open Source vs. “Open” LLMs

**In traditional open source software:**
- The *source code* is publicly available for viewing, modifying, and distributing.  
- You can also see how it’s compiled and what dependencies it uses.

**For “open source” LLMs:**
- Their *trained weights* might be publicly shared under a license that allows you to download, run, or fine-tune the model.  
- However, the *training data* and training scripts are often kept private.  
- Without that information, you can’t fully recreate or retrain the model from scratch.

---

### 2. Why Having Just the Weights Isn’t Enough

1. **Proprietary or Private Datasets**  
   - LLMs usually learn from massive datasets that might not be available publicly (due to licensing or NDAs).  
   - Simply having the final weights doesn’t reveal which data the model was trained on.  
   - This makes replicating or altering the original training process very difficult.

2. **Training Software and Scripts**  
   - Organizations sometimes share only parts of the code used for training.  
   - The complete “recipe” (including special configs, distributed-training techniques, or hyperparameters) might be missing.  
   - Without those, recreating results is nearly impossible.

3. **Infrastructure Requirements**  
   - Modern LLMs need powerful (and expensive) GPU clusters or specialized hardware to train.  
   - Even if you have the same data and code, you might not have the multi-million-dollar compute setup.  
   - This creates a major practical barrier for reproducing “open” models.

---

### 3. The DeepSeek R1 Release and the “Open” Hype

DeepSeek R1 launched with lots of buzz and was labeled by some as an open-source LLM. In reality:

- The **weights** were shared under a permissive license.  
- The **training data** is either under NDA or proprietary.  
- The **training details** (like hyperparameters, custom code) remain undisclosed.

Yes, you can download and fine-tune DeepSeek R1. But you can’t fully recreate its training or verify the exact steps that produced those weights. So it’s more accurate to call DeepSeek R1 a “model with openly available weights” rather than a completely open source project.

---

### 4. Implications for the LLM Community

1. **Innovation and Transparency**  
   - Released weights help developers build apps or fine-tune for their own needs.  
   - But hidden data selection or cleaning processes mean unseen biases might remain.

2. **Reproducibility**  
   - True open source in machine learning would let others retrain and get similar results.  
   - Without full data, code, and environment details, that’s virtually impossible.

3. **Commercial vs. Community**  
   - Companies may share parts of their model for community use or research while keeping key components private.  
   - Some academic/nonprofit labs aim for full transparency but usually face funding limits for large-scale training.

---

### 5. How to Build (and Share) LLMs More Transparently

1. **Provide *All* Training Artifacts**  
   - Share data sources (where possible), data preprocessing steps, and licensing details.  
   - Release the training scripts, hyperparameters, and environment configurations.

2. **Document the Infrastructure**  
   - Clearly describe the hardware setup, memory usage, and any unique system configurations.  
   - While it won’t solve cost issues, it at least helps others understand your approach.

3. **Use Clear Licensing**  
   - If it’s truly open source, use recognized licenses (e.g., Apache 2.0, MIT) that grant reuse and distribution rights.  
   - If there are restrictions (like research-only), be explicit.

4. **Encourage Community Contributions**  
   - Permit users to view and modify training code.  
   - Offer discussion platforms (forums, GitHub issues) where people can give feedback or suggest improvements.

---

### 6. Conclusion

Simply being able to download and run LLM weights doesn’t make a model “fully open source.” True openness involves sharing everything—training data, code, infrastructure details—so anyone can replicate or deeply modify the model.

DeepSeek R1’s release is exciting, but we need to be clear on what “open” really means. By setting the right expectations, we keep AI research honest, transparent, and collaborative.
4:Tc49,

# Quantum Computing Demystified: The Essential Math

Quantum computing still feels mysterious to many, but at heart it uses beautifully simple math ideas—once you get used to them!

---

## 1. Qubits: More Than 0 or 1

Imagine a spinning coin: Before it lands, you don’t know if it’s heads or tails—it’s kind of “both.” A qubit is similar:

- A regular bit is strictly 0 or 1.  
- A qubit can be both 0 and 1 at the same time (a “superposition”).  

In math form:  
|ψ> = α|0> + β|1>

where alpha and beta  are numbers that show “how much” the qubit is in state |0> and |1>.

---

## 2. Entanglement: Qubits Acting Together

Entanglement is like two magic coins you flip at the same time. If one lands heads, the other is guaranteed tails (or vice versa). They’re linked, even if separated. An example is the “Bell state”:

(1 / √2) * (|00> + |11>)


Translated loosely:
- Each qubit is not just 0 or 1, but they act as a single unit.  
- Measuring one qubit instantly tells you the state of the other.  

---

## 3. Quantum Gates: Transforming Qubits

Think of quantum gates like instructions in a recipe:

- **X Gate (like a NOT):** Flips |0>↔|1>.  
- **Hadamard (H Gate):** Creates a superposition if starting from |0>.  
- **CNOT (Controlled NOT):** Operates on two qubits: if the first qubit is |1>, it flips the second qubit.  

They’re special because they must keep track of probabilities correctly (they’re “unitary” operations).

---

## 4. Quantum Algorithms: Simple Insights

**Grover’s Algorithm** helps find a needle in a haystack about √N times faster than classical searching. It’s like shaking all the “hay” in parallel and letting the item you want stand out more and more after each shake.

**Shor’s Algorithm** can factor large numbers surprisingly quickly—threatening normal encryption (RSA). That’s why big companies and governments are watching quantum computing closely!

---

## Why It Matters

1. **Superposition:** A qubit can represent multiple possibilities at once.  
2. **Interference:** Quantum effects can magnify the right answers and reduce the wrong ones.  
3. **Entanglement:** Qubits can be tied together in ways no classical system can match.  

Though today’s quantum computers have limited power and can be noisy, these concepts promise amazing future applications—from speeding up searches to cracking tough math problems.

---

## Getting Started

1. Brush up on **linear algebra** (matrices and vectors).  
2. Review **complex numbers**—those “i” and “√(-1)” might pop up!  
3. Understand **probability** (we talk about measuring states in terms of odds).  
4. Dive into **basic quantum gate** ideas: how they flip and combine these qubits.  

Quantum computing isn’t “magic.” It’s math that looks magical until you get familiar with it—like learning chord progressions on a guitar. With some practice, you’ll see how the notes fit together.

> “If you think you understand quantum mechanics, you don’t understand quantum mechanics.”  
> — Richard Feynman  
> *(But it still helps to learn the basics!)*
5:Tf8f,

## Introduction

[YaBilal.nl](https://www.yabilal.nl/)  is my personal passion project that captures all the phases of cutting-edge product development: PCB design, low-level MCU coding, AWS Cloud orchestration, and IoT integration. Whether you live in Europe, the US, or anywhere in between, I’m confident YaBilal can bring the exact Azan times you need right into your home.


## The Tech Stack Behind YaBilal

1. **Custom PCB Layout**  
   I designed and manufactured a compact PCB (approximately 7×5×4 cm) that integrates everything needed for audio playback and Wi-Fi connectivity. I made sure all major components—from power management to signal processing—flow together seamlessly.
   
2. **Low-Level MCU Firmware**  
   The microcontroller at the heart of YaBilal manages communication with the speaker, interfaces with sensors and controls, and synchronizes with my cloud service. The firmware is fine-tuned to minimize latency and keep the overall system stable.

3. **AWS Cloud Backend**  
   Behind the scenes, an AWS IoT backend continuously monitors all mosque prayer times, ensuring they’re accurate and updated hourly. Whenever there’s a schedule change—for example, during Ramadan or daylight savings—the cloud immediately pushes the updated information to every YaBilal appliance.

4. **IoT Integration**  
   YaBilal uses a secure IoT protocol to exchange data with AWS. This means each device checks in regularly to retrieve the next Azan schedule, adjust for new mosques, or even update the local time offset. Whether you’re online or offline, YaBilal adapts to keep you in sync.

5. **3D Enclosure Design**  
   To house all the electronics, I built a streamlined 3D enclosure that fits easily in your bedroom, kitchen, or living room. It’s small enough not to take up too much space, yet big enough to include intuitive volume controls and deliver a clear, pleasant Azan.

---

## How YaBilal Works

1. **Select Your Mosque**  
   Choose from a list of growing supported mosques. The cloud backend updates your device’s prayer schedule immediately.  
2. **Adjust Volume & Settings**  
   A built-in speaker and simple buttons let you select the volume you want.  
3. **Enjoy Authentic Azan**  
   YaBilal accurately plays the Azan on time, every time—no guesswork or generic approximations.

This close sync with AWS Cloud ensures errors or delays are practically eliminated. If your local mosque changes its schedule, the device is instantly updated.

---

## YaBilal Models

### YaBilal-Standard
A simple, straightforward choice if you want an out-of-the-box solution for exact Azan times.

• Price: €90.00  
• Status: Pre-Order  

### YaBilal-Plus
A step up that includes a personalized engraving on the device, making it a great gift or keepsake. Purchasing the Plus version also helps me continue refining and supporting more mosques around the globe.

• Price: €120.00  
• Status: Pre-Order  
• Includes custom engraving  

---

## Why I Built It

Living in Europe, I often felt disconnected from the Azan schedules in my hometown. I realized many other Muslims here (and in other parts of the world) face the same challenge. By merging the latest hardware, firmware, cloud computing, and IoT technologies, I brought YaBilal to life to ensure every user stays connected to their faith—no matter their location.

---

## Order & Further Details

Explore YaBilal-Standard or YaBilal-Plus at [YaBilal.nl](https://www.yabilal.nl/) to place your pre-order. If you have any questions or need assistance, feel free to drop a message. I’m always happy to help.

---

## Final Thoughts

YaBilal is my personal passion project that captures all the phases of cutting-edge product development: PCB design, low-level MCU coding, AWS Cloud orchestration, and IoT integration. Whether you live in Europe, the US, or anywhere in between, I’m confident YaBilal can bring the exact Azan times you need right into your home.

0:["IHIalW0VQkBEGzoSckVyG",[[["",{"children":["tech-writeups",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",{"children":["tech-writeups",{"children":["__PAGE__",{},[["$L1",["$","main",null,{"className":"flex min-h-screen flex-col items-center","children":["$","$L2",null,{"posts":[{"slug":"deepseek-r1","title":"OpenSource LLM? Really? (DeepSeek R1 example)","summary":"DeepSeek R1 buzz:is it really OpenSource?","author":"abde","date":"2025-01-15 14:35:23 +0530","thumbnail":"/images/blog/25-jan-deepseek-opensource/DeepSeek-Logo.jpg","keywords":["CyberSec","TLS","ECH","Cloud","Quantum","Cryptography"],"content":"$3","readingTime":"4 min read"},{"slug":"quantum-and-cybersec","title":"The Math behind Quantum, in a nutchel","summary":"Cutting through the hype to explore the mathematics powering quantum computers","author":"abde","date":"2022-01-15 14:35:23 +0530","thumbnail":"/images/blog/2023-quantum/bits.jpg","keywords":["quantum computing","qubits","linear algebra","quantum gates"],"content":"$4","readingTime":"3 min read"},{"slug":"yabilal-iot","title":"YaBilal.nl:Combining PCB Design, MCU Coding, and AWS IoT","summary":"How I built a device that precisely matches mosque prayer times using cutting-edge tech","author":"abde","date":"2021-03-10 10:00:00 +0100","thumbnail":"/images/blog/2021-03-10-making-of-yabilal/yabilal-device.png","keywords":["Azan","PCB","3D design","MCU","AWS Cloud","IoT"],"content":"$5","readingTime":"3 min read"}]}]}],null],null],null]},[null,["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","tech-writeups","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/792e337377e6d5ce.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","className":"__variable_3a0388 dark","children":["$","body",null,{"children":[["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],["$","$L8",null,{}]]}]}]],null],null],["$L9",null]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"abde.ai"}],["$","meta","3",{"name":"description","content":"A Portfolio template built with Next.js"}],["$","link","4",{"rel":"icon","href":"/swirl.svg"}],["$","meta","5",{"name":"next-size-adjust"}]]
1:null
